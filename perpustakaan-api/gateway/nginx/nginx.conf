# user and worker_processes are fine as they are
user nobody;
worker_processes 1;

# error_log directives are commented out, which is fine for now
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# pid directive is commented out, which is fine for now
#pid        logs/nginx.pid;


events {
    worker_connections 1024; # This is a standard setting
}


http {
    include mime.types;
    default_type application/octet-stream;

    # log_format and access_log directives are commented out, which is fine for now
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                      '$status $body_bytes_sent "$http_referer" '
    #                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile on;
    #tcp_nopush     on; # Commented out, fine for now

    #keepalive_timeout  0; # Commented out, original keepalive_timeout 65 is used
    keepalive_timeout 65; # This is a standard setting

    #gzip  on; # Commented out, fine for now

    # --- START: UPSTREAM BLOCK DITAMBAHKAN ---
    # Mendefinisikan backend service (aplikasi Node.js)
    upstream backend_perpustakaan {
        # Alamat dan port aplikasi Node.js 
        # Pastikan ini sesuai dengan port di mana server.js berjalan (misal: 5000)
        server 127.0.0.1:5000;
    }
    # --- END: UPSTREAM BLOCK DITAMBAHKAN ---

    # THIS IS THE SERVER BLOCK WE NEED TO MODIFY
    server {
        listen 80; # NGINX akan mendengarkan di port ini. Ganti ke 8080 jika ada konflik.
        server_name localhost; # Ganti dengan domain Anda jika ada, untuk lokal gunakan localhost.

        #charset koi8-r; # Commented out, fine for now

        #access_log  logs/host.access.log  main; # Commented out, fine for now

        # --- START: LOCATION BLOCK (REPLACED AND ENHANCED) ---
        location / {
            # Aturan validasi permintaan di Gateway (opsional, uncomment untuk mengaktifkan)
            # Ini hanya memeriksa apakah header Authorization ada, bukan validitas isinya.
            # Validasi token JWT penuh tetap di backend Node.js
            # if ($http_authorization = "") {
            #     return 401 "Unauthorized: Authorization header is missing.";
            # }

            # Perintah inti: meneruskan request ke upstream Node.js 
            proxy_pass http://backend_perpustakaan; # Menggunakan nama upstream yang didefinisikan di atas

            # Pengaturan ini penting untuk HTTP/WebSocket compatibility
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';

            # Ini meneruskan header Host asli ke backend (misalnya localhost:80)
            proxy_set_header Host $host;

            # Ini penting agar API Node.js tahu IP asli dari klien (bukan IP NGINX)
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme; # Meneruskan skema protokol (http/https)

             # Menonaktifkan caching untuk request yang melewati proxy (biasanya default untuk API)
            proxy_cache_bypass $http_upgrade;

            # Pengaturan timeout dan buffer (direkomendasikan untuk API)
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffers 32 4k;
        }
         # --- END: LOCATION BLOCK ---

        # error_page directives are fine as they are
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page 500 502 503 504 /50x.html;
         location = /50x.html {
            root html;
        }

        # PHP proxy and FastCGI settings are commented out, which is fine
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # The other virtual host using mix of IP-, name-, and port-based configuration
    # is commented out, so it won't interfere.
    #
    #server {
    #    listen        8000;
    #    listen        somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server block is commented out, so it won't interfere for now.
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
